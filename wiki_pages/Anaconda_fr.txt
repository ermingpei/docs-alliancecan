<languages />
[[Category:Software]]
Anaconda est une distribution de Python. Nous demandons à nos utilisateurs de '''ne pas installer Anaconda sur nos grappes'''. On vous recommande d'utiliser des autres pistes comme un environnement virtuel ou bien un conteneur [[Apptainer/fr | Apptainer]], pour les cas les plus compliqués. 

== N'installez pas Anaconda sur nos grappes ==

Nous sommes conscients qu'Anaconda est largement utilisé dans plusieurs domaines étudiés par nos utilisateurs (la science des données, l'IA, la bioinformatique, etc). Anaconda est une solution intéressante pour simplifier la gestion de Python et de librairies sur un ordinateur personnel. Cependant, sur une grappe comme celles maintenues par l'Alliance, la gestion des librairies doit être faite par notre personnel, afin d'assurer une compatibilité et une performance maximales. Voici une liste de raisons:

* Anaconda installe très souvent des logiciels (compilateurs, bibliothèques scientifiques etc.) qui existent déjà sur les grappes de l'Alliance comme modules, avec une configuration qui n'est pas optimale.
* installe des binaires qui ne sont pas optimisés pour les processeurs de nos grappes.
* fait de mauvaises suppositions sur l'emplacement de bibliothèques.
* s'installe dans le <code>$HOME</code> par défaut, où il place une énorme quantité de fichiers. L'installation d'Anaconda seule peut prendre près de la moitié de votre quota sur le nombre de fichiers dans votre espace personnel.  
* est plus lent pour installer des paquets
* modifie <code>$HOME/.bashrc</code>, ce qui peut causer des conflits.

== Comment transitionner de Conda vers virtualenv ==

[[Python#Creating_and_using_a_virtual_environment|Virtualenv]] vous offre toutes les fonctionnalités dont vous avez besoin pour utiliser Python sur nos grappes. Voici comment passer à virtualenv si vous utilisez Anaconda sur votre ordinateur personnel:

# Listez les dépendances (requis) de l'application que vous voulez utiliser. Afin de ce faire, vous pouver :
## Exécuter <code>pip show <nom_paquet></code> depuis votre environement virtuel (si le paquet existe sur [https://pypi.org/ PyPI])
## Ou, vérifier s'il existe un fichier <tt>requirements.txt</tt> dans le dépôt Git.
## Ou, vérifier la variable <tt>install_requires</tt> du fichier <tt>setup.py</tt> qui énumère les requis.
# Trouvez quelles dépendances sont des paquets Python, et lesquelles sont des librairies fournies par Anaconda. Par exemple, CUDA et CuDNN sont des librairies disponible sur l'Anaconda Cloud, mais que vous ne devez pas installer vous-même sur nos grappes. Elles sont déjà installées.
# Retirez de la liste de dépendance tout ce qui n'est pas un paquet Python (par exemple, retirez <code>cudatoolkit</code> et <code>cudnn</code>).
# Utilisez un [[Python#Creating_and_using_a_virtual_environment|virtualenv]], dans lequel vous installerez ces dépendances.

Votre application devrait fonctionner. Si ce n'est pas le cas, n'hésitez pas à contacter notre soutien technique.

==Usage d'Apptainer==

Dans certaines situations, la complexité des dépendances d'un logiciel exige une solution où l'on peut maîtriser entièrement l'environnement. Pour ces situations, on recommande l'outil [[Apptainer/fr#Travailler_avec_Conda | Apptainer]] : notez qu'une image Docker peut être convertie en image Apptainer. Le seul inconvénient de Apptainer, c'est que les images consomment beaucoup d'espace disque, alors si votre groupe de recherche prévoit d'utiliser plusieurs images, il serait sage de les regrouper ensemble dans un seul répertoire de l'espace projet du groupe pour éviter les doublons.

== Exemples spécifiques où Anaconda ne fonctionne pas ==
;R : Une recette conda force l'installation de R. Cette installation ne performe pas aussi bien que le R disponible par les modules (qui lui utilise Intel MKL). Ce même R fonctionne mal et les tâches meurent, gaspillant ainsi des ressources et votre temps.