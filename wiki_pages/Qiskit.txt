<languages />
<translate>

<!--T:1-->
[https://docs.quantum.ibm.com/ Qiskit] est une bibliothèque de programmation quantique à code source ouvert développée en Python par IBM. Comme [[PennyLane]] et [[Snowflurry]], elle permet de construire, simuler et exécuter des circuits quantiques.

== Installation == <!--T:2-->
1. Chargez les dépendances de Qiskit.
{{Command|module load StdEnv/2023 gcc python/3.11 symengine/0.11.2}}

<!--T:3-->
2. Créez et activez un [[Python/fr#Créer_et_utiliser_un_environnement_virtuel|environnement virtuel Python]].
{{Command|virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate}}

<!--T:4-->
3. Installez une version spécifique de Qiskit.
{{Commands
|prompt=(ENV) [name@server ~]
|pip install --no-index --upgrade pip
|pip install --no-index qiskit{{=}}{{=}}X.Y.Z  qiskit_aer{{=}}{{=}}X.Y.Z}}
où <code>X.Y.Z</code> représente le numéro de la version, par exemple <code>1.4.0</code>. Pour installer la plus récente version disponible sur nos grappes, n'indiquez pas de version. Ici, nous n'avons importé que <code>qiskit</code> et <code>qiskit_aer</code>. Vous pouvez ajouter d'autres logiciels Qiskit en fonction de vos besoins en suivant la structure <code>qiskit_package==X.Y.Z</code> où <code>qiskit_package</code> représente le logiciel voulu, par exemple <code>qiskit-finance</code>. Les wheels présentement disponibles sont listés sur la page [[Available Python wheels/fr|Wheels Python]]. 

<!--T:5-->
4. Validez l’installation de Qiskit.
{{Command|prompt=(ENV)[name@server ~]|python -c 'import qiskit'}}

5. Gelez l'environnement et les dépendances.
{{Command|prompt=(ENV)[name@server ~]|pip freeze --local > ~/qiskit_requirements.txt}}
==Exécuter Qiskit sur une grappe== <!--T:6-->
{{File
  |name=script.sh
  |lang="sh"
  |contents=
#!/bin/bash
#SBATCH --account=def-someuser #indiquez le nom de votre compte
#SBATCH --time=00:15:00        #modifiez s'il y a lieu
#SBATCH --cpus-per-task=1      #modifiez s'il y a lieu
#SBATCH --mem-per-cpu=1G       #modifiez s'il y a lieu

<!--T:7-->
# Chargez les dépendances des modules.
module load StdEnv/2023 gcc python/3.11 symengine/0.11.2 

<!--T:8-->
# Générez l'environnement virtuel dans $SLURM_TMPDIR.                                                                                                         
virtualenv --no-download ${SLURM_TMPDIR}/env                                                                                                                   
source ${SLURM_TMPDIR}/env/bin/activate  

<!--T:9-->
# Installez Qiskit et ses dépendances.                                                                                                                                                                                                                                                                                    
pip install --no-index --upgrade pip                                                                                                                            
pip install --no-index --requirement ~/qiskit_requirements.txt

#Modifiez le programme Qiskit.                                                                                                                                                                       
python qiskit_example.py
}}
Vous pouvez ensuite [[Running jobs/fr|soumettre votre tâche à l'ordonnanceur]]. 
== Utiliser Qiskit avec MonarQ (à venir)== <!--T:10-->
<!-- Il est possible d'importer un projet Qiskit dans PennyLane afin de l'exécuter sur [[MonarQ]]. 
1. Installez PennyLane dans votre environnement virtuel si ce n’est pas déjà fait
{{Command|pip install --no-index pennylane}}

<!--T:11-->
2. Installez le plugiciel pennylane-qiskit
{{Command|pip install --no-index pennylane-qiskit}}

<!--T:12-->
3. Installez le plugiciel pennylane-snowflurry 
{{Command|pip install pennylane-snowflurry}}

<!--T:18-->
Pour utiliser un circuit Qiskit en PennyLane, suivez les instructions dans la [https://docs.pennylane.ai/en/stable/introduction/importing_workflows.html documentation]. Vous pouvez ensuite exécuter votre circuit sur MonarQ en suivant les instructions dans la documentation [https://github.com/calculquebec/pennylane-snowflurry pennylane-snowflurry].
-->

== Exemple d'utilisation : États de Bell == <!--T:13-->
Nous allons créer le premier état de Bell sur [[Narval]] en simulation. Il faut d'abord importer les modules nécessaires. 
    from qiskit_aer import AerSimulator
    from qiskit import QuantumCircuit
    from qiskit.visualization import plot_histogram

<!--T:14-->
Ensuite, nous définissons le circuit. Nous appliquons une porte Hadamard afin de créer un état de superposition sur le premier qubit et nous appliquons ensuite une porte CNOT pour intriquer le premier et le deuxième qubit.
    circuit = QuantumCircuit(2)
    circuit.h(0)
    circuit.cx(0,1)
    circuit.measure_all()

<!--T:15-->
Nous précisons le simulateur que nous voulons utiliser. <code>AerSimulator</code> étant le simulateur par défaut. Nous obtenons le dénombrement des états finaux des qubits après 1000 mesures.
    simulator = AerSimulator()
    result = simulator.run(circuit, shots=1000).result()
    counts = result.get_counts()
    print(counts)
    {'00': 489, '11': 535}
Nous affichons un histogramme des résultats avec la commande
    plot_histogram(counts)

<!--T:16-->
[[File:Qiskit counts.png|thumb|Histogramme des résultats de 1000 mesures sur le premier état de Bell]]

</translate>