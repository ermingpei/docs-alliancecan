<languages />

Le contenu du présent tutoriel est tiré en grande partie de la session de formation intensive sur OpenACC tenue à la [http://www.gputechconf.com/ GPU Technology Conference 2016]. 

OpenACC (pour ''Open Accelerators'') est une interface de programmation API servant à porter du code sur des accélérateurs tels que des processeurs graphiques (GPUs pour ''grapical programming units'') et des coprocesseurs. Ce standard de programmation pour le calcul parallèle a été développé par Cray, CAPS, NVIDIA et PGI. À l'instar d'[[OpenMP/fr|OpenMP]], le code C, C++ ou Fortran est annoté par le programmeur pour identifier les parties que le compilateur doit paralléliser. 

SHARCNET offre un tutoriel de formation autonome; cliquez sur [https://training.sharcnet.ca/courses/enrol/index.php?id=173 Introduction to GPU Programming].

{{Prerequisites
|title=Prérequis
|content=
Ce tutoriel démontre comment utiliser OpenACC pour accélérer des programmes en C, C++ ou Fortran; une bonne connaissance d'un de ces langages vous permettra de tirer meilleur profit des exercices. 
}}
{{Getready
|title=Avant de commencer
|content=
Téléchargez les exemples à partir du [https://github.com/calculquebec/cq-formation-openacc répertoire Github].
}}

== Plan des leçons==
* [[OpenACC Tutorial - Introduction/fr|Introduction]] 
* [[OpenACC_Tutorial_-_Profiling/fr|Profileurs]]
* [[OpenACC_Tutorial_-_Adding_directives/fr|Ajouter des directives]]
* [[OpenACC Tutorial - Data movement/fr|Mouvement des données]]
* [[OpenACC Tutorial - Optimizing loops/fr|Optimiser les boucles]]

== Références ==

* [https://www.openacc.org/sites/default/files/inline-files/openacc-guide.pdf OpenACC Programming and Best Practices Guide (PDF)]
* [https://www.openacc.org/sites/default/files/inline-files/API%20Guide%202.7.pdf OpenACC API 2.7 OpenACC 2.15 Reference Guide (PDF)]
* [https://developer.nvidia.com/blog/getting-started-openacc/ Getting Started with OpenACC]
* [https://docs.nvidia.com/hpc-sdk/pgi-compilers/legacy.html PGI Compiler]
* [http://www.pgroup.com/resources/pgprof-quickstart.htm PG Profiler]
* [http://docs.nvidia.com/cuda/profiler-users-guide/index.html#visual-profiler NVIDIA Visual Profiler]