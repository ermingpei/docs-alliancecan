<languages />
[[Category:Software]][[Category:BiomolecularSimulation]]
=Introduction=
OpenMM<ref name="OpenMM_home">Site Web OpenMM : https://openmm.org/</ref> est une boîte d'outils conçue pour la simulation moléculaire. On peut l'utiliser seule comme application pour effectuer des simulations ou comme bibliothèque que vous appelez à partir de votre code. OpenMM est un paquet unique de par sa très grande flexibilité des champs de force personnalisés et des algorithmes de résolution (ou d’intégration), son ouverture et son excellente performance, en particulier avec les GPU récents.

=Simulation avec topologies AMBER et fichiers de redémarrage=

== Préparer l'environnement virtuel Python ==

Cet exemple utilise le module openmm/7.7.0.

1. Créez et activez l'environnement virtuel Python. 
{{Commands|prompt=[name@server ~]
| module load python
| virtualenv $HOME/env-parmed
| source $HOME/env-parmed/bin/activate
}}

2. Installez les modules Python ParmEd et netCDF4.
{{Commands|prompt=(env-parmed)[name@server ~]
| pip install --no-index parmed{{=}}{{=}}3.4.3 netCDF4
}}

== Soumettre une tâche == 
Le script suivant est pour une tâche de simulation qui utilise un GPU.

{{File
  |name=submit_openmm.cuda.sh
  |lang="sh"
  |contents=
#!/bin/bash
#SBATCH --cpus-per-task=1 
#SBATCH --gpus=1
#SBATCH --mem-per-cpu=4000M
#SBATCH --time=0-01:00:00
# Usage: sbatch $0

module purge
module load StdEnv/2020 gcc/9.3.0 cuda/11.4 openmpi/4.0.3 
module load python/3.8.10 openmm/7.7.0 netcdf/4.7.4 hdf5/1.10.6 mpi4py/3.0.3
source $HOME/env-parmed/bin/activate

python openmm_input.py
}}

Ici, <code>openmm_input.py</code> est un script Python qui charge des fichiers Amber, crée le système de simulation OpenMM, configure l'intégration et exécute les dynamiques ( [https://mdbench.ace-net.ca/mdbench/idbenchmark/?q=129 voir cet exemple)].

==Performance et étalonnage <i>benchmarking</i>==

Le guide <i>[https://mdbench.ace-net.ca/mdbench/ Molecular Dynamics Performance Guide]</i> a été créé par une équipe [https://www.ace-net.ca/ d'ACENET]. Le guide décrit les conditions optimales pour exécuter aussi des tâches sur nos grappes avec AMBER, GROMACS et NAMD.

Sur la plateforme CUDA, OpenMM n'a besoin que d'un CPU par GPU parce que les CPU ne sont pas utilisés pour les calculs. OpenMM peut utiliser plusieurs GPU dans un nœud, mais il est plus efficace de faire les simulations avec un seul GPU. Comme le démontrent les [https://mdbench.ace-net.ca/mdbench/bform/?software_contains=OPENMM.cuda&software_id=&module_contains=&module_version=&site_contains=Narval&gpu_model=&cpu_model=&arch=&dataset=6n4o essais sur Narval] et [https://mdbench.ace-net.ca/mdbench/bform/?software_contains=OPENMM.cuda&software_id=&module_contains=&module_version=&site_contains=Cedar&gpu_model=V100-SXM2&cpu_model=&arch=&dataset=6n4o ceux sur Cedar], la vitesse de simulation avec plusieurs GPU est légèrement augmentée sur les nœuds avec NvLink où les GPU sont directement connectés. Sans NvLink, la vitesse de simulation augmente très peu avec des GPU P100 ([https://mdbench.ace-net.ca/mdbench/bform/?software_contains=OPENMM.cuda&software_id=&module_contains=&module_version=&site_contains=Cedar&gpu_model=P100-PCIE&cpu_model=&arch=&dataset=6n4o essais sur Cedar]).